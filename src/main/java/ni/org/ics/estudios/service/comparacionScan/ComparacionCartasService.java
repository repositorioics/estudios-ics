package ni.org.ics.estudios.service.comparacionScan;

import ni.org.ics.estudios.dto.cartas.ComparacionCartasDto;
import ni.org.ics.estudios.dto.cartas.ComparacionRelFamCartasDto;
import ni.org.ics.estudios.dto.cartas.ComparacionTutorRelFamDto;
import ni.org.ics.estudios.dto.cartas.DiferenciaParteCartaDto;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;

/**
 * Created by miguel on 7/1/2022.
 */
@Service("comparacionCartasService")
@Transactional
public class ComparacionCartasService {

    @Resource(name = "sessionFactory")
    private SessionFactory sessionFactory;


    @SuppressWarnings("unchecked")
    public List<DiferenciaParteCartaDto> getDiferenciasPartesCartas(){
        Session session = sessionFactory.getCurrentSession();
        Query query = session.createSQLQuery("WITH cte0 AS( SELECT DISTINCT spc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, spc.FECHA_CARTA) AS edadMeses, DATE_FORMAT(spc.FECHA_CARTA,'%d-%m-%Y') AS fechaFirma, spc.USUARIO_REGISTRO AS usuarioRegistro, IF (SUM(CASE WHEN dp.IDPARTE = 1 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteASc, IF(SUM(CASE WHEN dp.IDPARTE = 2 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteBSc, IF(SUM(CASE WHEN dp.IDPARTE = 3 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteCSc, spc.CONTACTO_FUTURO AS aceptaContactoFuturoSc,(SELECT m.es FROM mensajes m WHERE m.catRoot = 'CAT_TIPO_ASENT' AND m.catKey = spc.TIPO_ASENTIMIENTO) AS asentimientoVerbalSc, e.CODIGO AS estudio, v.VERSION AS version FROM participantes p INNER JOIN scan_participante_carta spc ON p.CODIGO=spc.codigo_participante INNER JOIN scan_detalle_parte dp USING(IDPARTICIPANTECARTA)INNER JOIN scan_catalog_version v ON v.IDVERSION = spc.IDVERSION INNER JOIN estudios e ON e.CODIGO=v.CODIGO_ESTUDIO WHERE (YEAR(spc.FECHA_CARTA)= YEAR(CURDATE()) AND spc.IDVERSION = 1 AND spc.ANULADA = 0) GROUP BY spc.CODIGO_PARTICIPANTE, FECHA_CARTA, spc.USUARIO_REGISTRO, spc.CONTACTO_FUTURO, spc.TIPO_ASENTIMIENTO ORDER BY spc.CODIGO_PARTICIPANTE ASC), cte1 AS ( SELECT DISTINCT cc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, cc.fecha_firma) AS edadMeses, DATE_FORMAT(cc.fecha_firma, '%d-%m-%Y') AS fechaFirma, cc.usuario_registro AS usuarioRegistro, cc.ACEPTA_PARTE_A AS aceptaParteACc, cc.ACEPTA_PARTE_B AS aceptaParteBCc, cc.ACEPTA_PARTE_C AS aceptaParteCCc, COALESCE(cc.ACEPTA_PARTE_D,'NA') AS aceptaParteDCc, COALESCE(cc.ACEPTA_PARTE_G,'NA') AS aceptaParteGCc, cc.ACEPTA_CONTACTO_FUTURO AS aceptaContactoFuturoCc, COALESCE((SELECT m.es FROM mensajes m WHERE m.catRoot='CAT_TIPO_ASENT' AND m.catKey = t.ASENTIMIENTO_VERBAL),'NA') asentimientoVerbalCc, t.CODIGO_ESTUDIO AS estudio, CONCAT(cc.version,'.0') AS \"version\" FROM cartas_consentimientos cc INNER JOIN tamizajes t ON cc.CODIGO_TAMIZAJE=t.codigo INNER JOIN participantes p ON p.CODIGO=cc.codigo_participante WHERE YEAR(cc.FECHA_FIRMA)= YEAR(CURDATE()) AND cc.VERSION = '3' AND t.CODIGO_ESTUDIO=1 ORDER BY cc.CODIGO_PARTICIPANTE ASC )SELECT b.codigo AS codigo, b.fechaFirma AS fechaFirma, b.edadActualMeses AS edadActualMeses, b.edadMeses AS edadMeses, a.aceptaParteASc AS aceptaParteASc, b.aceptaParteACc AS aceptaParteACc, a.aceptaParteBSc AS aceptaParteBSc, b.aceptaParteBCc AS aceptaParteBCc, a.aceptaParteCSc AS aceptaParteCSc, b.aceptaParteCCc AS aceptaParteCCc, 'NA' as aceptaParteDSc, b.aceptaParteDCc AS aceptaParteDCc, 'NA' AS aceptaParteGSc, b.aceptaParteGCc, a.aceptaContactoFuturoSc AS aceptaContactoFuturoSc, b.aceptaContactoFuturoCc AS aceptaContactoFuturoCc, a.asentimientoVerbalSc AS asentimientoVerbalSc,b.asentimientoVerbalCc AS asentimientoVerbalCc, b.estudio AS estudio, b.VERSION AS version FROM cte0 AS a JOIN cte1 AS b ON (a.codigo=b.codigo AND a.fechaFirma=b.fechaFirma) WHERE (a.aceptaParteASc<>b.aceptaParteACc OR a.aceptaParteASc<>b.aceptaParteACc IS NULL) OR (a.aceptaParteBSc<>b.aceptaParteBCc OR a.aceptaParteBSc<>b.aceptaParteBCc IS NULL) OR (a.aceptaParteCSc<>b.aceptaParteCCc OR a.aceptaParteCSc<>b.aceptaParteCCc IS NULL) UNION (WITH cte0 AS (SELECT DISTINCT spc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, spc.FECHA_CARTA) AS edadMeses, DATE_FORMAT(spc.FECHA_CARTA,'%d-%m-%Y') AS fechaFirma, spc.USUARIO_REGISTRO AS usuarioRegistro, IF(SUM(CASE WHEN dp.IDPARTE = 4 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteASc, IF(SUM(CASE WHEN dp.IDPARTE = 5 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteBSc, IF(SUM(CASE WHEN dp.IDPARTE = 6 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteCSc, spc.CONTACTO_FUTURO AS aceptaContactoFuturoSc,(SELECT m.es FROM mensajes m WHERE m.catRoot = 'CAT_TIPO_ASENT' AND m.catKey = spc.TIPO_ASENTIMIENTO) AS asentimientoVerbalSc, e.CODIGO AS estudio, v.VERSION AS version FROM participantes p INNER JOIN scan_participante_carta spc ON p.CODIGO=spc.codigo_participante INNER JOIN scan_detalle_parte dp USING(IDPARTICIPANTECARTA)INNER JOIN scan_catalog_version v ON v.IDVERSION = spc.IDVERSION INNER JOIN estudios e ON e.CODIGO=v.CODIGO_ESTUDIO WHERE (YEAR(spc.FECHA_CARTA)= YEAR(CURDATE()) AND spc.IDVERSION = 2 AND spc.ANULADA = 0) GROUP BY spc.CODIGO_PARTICIPANTE, FECHA_CARTA, spc.USUARIO_REGISTRO, spc.CONTACTO_FUTURO, spc.TIPO_ASENTIMIENTO ORDER BY spc.CODIGO_PARTICIPANTE ASC), cte1 AS (SELECT DISTINCT cc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, cc.fecha_firma) AS edadMeses, DATE_FORMAT(cc.fecha_firma, '%d-%m-%Y') AS fechaFirma, cc.usuario_registro AS usuarioRegistro, cc.ACEPTA_PARTE_A AS aceptaParteACc, cc.ACEPTA_PARTE_B AS aceptaParteBCc, cc.ACEPTA_PARTE_C AS aceptaParteCCc, coalesce(cc.ACEPTA_PARTE_D,'NA') AS aceptaParteDCc, coalesce(cc.ACEPTA_PARTE_G,'NA') AS aceptaParteGCc, cc.ACEPTA_CONTACTO_FUTURO AS aceptaContactoFuturoCc, COALESCE((SELECT m.es FROM mensajes m WHERE m.catRoot='CAT_TIPO_ASENT' AND m.catKey = t.ASENTIMIENTO_VERBAL),'NA') asentimientoVerbalCc, t.CODIGO_ESTUDIO AS estudio, CONCAT(cc.version,'.0') AS \"version\" FROM cartas_consentimientos cc INNER JOIN tamizajes t ON cc.CODIGO_TAMIZAJE=t.codigo INNER JOIN participantes p ON p.CODIGO=cc.codigo_participante WHERE YEAR(cc.FECHA_FIRMA)= YEAR(CURDATE()) AND cc.VERSION = '15' AND t.CODIGO_ESTUDIO=3 ORDER BY cc.CODIGO_PARTICIPANTE ASC )SELECT b.codigo AS codigo, b.fechaFirma AS fechaFirma, b.edadActualMeses AS edadActualMeses, b.edadMeses AS edadMeses, a.aceptaParteASc AS aceptaParteASc, b.aceptaParteACc AS aceptaParteACc, a.aceptaParteBSc AS aceptaParteBSc, b.aceptaParteBCc AS aceptaParteBCc, a.aceptaParteCSc AS aceptaParteCSc, b.aceptaParteCCc AS aceptaParteCCc, 'NA' as aceptaParteDSc, b.aceptaParteDCc, 'NA' AS aceptaParteGSc, b.aceptaParteGCc, a.aceptaContactoFuturoSc AS aceptaContactoFuturoSc, b.aceptaContactoFuturoCc AS aceptaContactoFuturoCc, a.asentimientoVerbalSc AS asentimientoVerbalSc,b.asentimientoVerbalCc AS asentimientoVerbalCc, b.estudio AS estudio, b.VERSION AS version FROM cte0 AS a JOIN cte1 AS b ON (a.codigo=b.codigo AND a.fechaFirma=b.fechaFirma) WHERE (a.aceptaParteASc<>b.aceptaParteACc OR a.aceptaParteASc<>b.aceptaParteACc IS NULL) OR (a.aceptaParteBSc<>b.aceptaParteBCc OR a.aceptaParteBSc<>b.aceptaParteBCc IS NULL) OR (a.aceptaParteCSc<>b.aceptaParteCCc OR a.aceptaParteCSc<>b.aceptaParteCCc IS NULL)) UNION (WITH cte0 AS ( SELECT DISTINCT spc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, spc.FECHA_CARTA) AS edadMeses, DATE_FORMAT(spc.FECHA_CARTA,'%d-%m-%Y') AS fechaFirma, spc.USUARIO_REGISTRO AS usuarioRegistro, IF(SUM(CASE WHEN dp.IDPARTE = 13 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteASc, IF(SUM(CASE WHEN dp.IDPARTE = 14 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteBSc, IF(SUM(CASE WHEN dp.IDPARTE = 15 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteCSc, IF((SELECT COUNT(1) FROM scan_detalle_extension e WHERE e.PARTICIPANTE_CARTA = spc.IDPARTICIPANTECARTA AND e.ANULADA=0)=1,'1','0') AS aceptaParteDSc, spc.CONTACTO_FUTURO AS aceptaContactoFuturoSc,(SELECT m.es FROM mensajes m WHERE m.catRoot = 'CAT_TIPO_ASENT' AND m.catKey = spc.TIPO_ASENTIMIENTO) AS asentimientoVerbalSc, e.CODIGO AS estudio, v.VERSION AS version FROM participantes p INNER JOIN scan_participante_carta spc ON p.CODIGO=spc.codigo_participante INNER JOIN scan_detalle_parte dp USING(IDPARTICIPANTECARTA)INNER JOIN scan_catalog_version v ON v.IDVERSION = spc.IDVERSION INNER JOIN estudios e ON e.CODIGO=v.CODIGO_ESTUDIO WHERE (YEAR(spc.FECHA_CARTA)= YEAR(CURDATE()) AND spc.IDVERSION = 5 AND spc.ANULADA = 0) GROUP BY spc.CODIGO_PARTICIPANTE, FECHA_CARTA, spc.USUARIO_REGISTRO, spc.CONTACTO_FUTURO, spc.TIPO_ASENTIMIENTO,spc.IDPARTICIPANTECARTA ORDER BY spc.CODIGO_PARTICIPANTE ASC), cte1 AS (SELECT DISTINCT cc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, cc.fecha_firma) AS edadMeses, DATE_FORMAT(cc.fecha_firma, '%d-%m-%Y') AS fechaFirma, cc.usuario_registro AS usuarioRegistro, cc.ACEPTA_PARTE_A AS aceptaParteACc, cc.ACEPTA_PARTE_B AS aceptaParteBCc, cc.ACEPTA_PARTE_C AS aceptaParteCCc, cc.ACEPTA_PARTE_D AS aceptaParteDCc, coalesce(cc.ACEPTA_PARTE_G,'NA') AS aceptaParteGCc, cc.ACEPTA_CONTACTO_FUTURO AS aceptaContactoFuturoCc, COALESCE((SELECT m.es FROM mensajes m WHERE m.catRoot='CAT_TIPO_ASENT' AND m.catKey = t.ASENTIMIENTO_VERBAL),'NA') asentimientoVerbalCc, t.CODIGO_ESTUDIO AS estudio, CONCAT(cc.version,'.0') AS \"version\" FROM cartas_consentimientos cc INNER JOIN tamizajes t ON cc.CODIGO_TAMIZAJE=t.codigo INNER JOIN participantes p ON p.CODIGO=cc.codigo_participante WHERE YEAR(cc.FECHA_FIRMA)= YEAR(CURDATE()) AND cc.VERSION = '1' AND t.CODIGO_ESTUDIO=5 AND cc.acepta_parte_d IS NULL ORDER BY cc.CODIGO_PARTICIPANTE ASC),cte2 AS (SELECT c.CODIGO_PARTICIPANTE AS codigo, DATE(c.FECHA_FIRMA) AS fechaFirma, c.ACEPTA_PARTE_D AS aceptaParteDCc FROM cartas_consentimientos c INNER JOIN tamizajes t ON c.CODIGO_TAMIZAJE=t.codigo WHERE YEAR(c.FECHA_FIRMA)= YEAR(CURDATE()) AND c.VERSION = '1' AND t.CODIGO_ESTUDIO=5 AND c.acepta_parte_d IS NOT NULL) SELECT b.codigo AS codigo, b.fechaFirma AS fechaFirma, b.edadActualMeses AS edadActualMeses, b.edadMeses AS edadMeses, a.aceptaParteASc AS aceptaParteASc, b.aceptaParteACc AS aceptaParteACc, a.aceptaParteBSc AS aceptaParteBSc, b.aceptaParteBCc AS aceptaParteBCc, a.aceptaParteCSc AS aceptaParteCSc, b.aceptaParteCCc AS aceptaParteCCc, a.aceptaParteDSc, c.aceptaParteDCc, 'NA' AS aceptaParteGSc, b.aceptaParteGCC, a.aceptaContactoFuturoSc AS aceptaContactoFuturoSc,b.aceptaContactoFuturoCc AS aceptaContactoFuturoCc, a.asentimientoVerbalSc AS asentimientoVerbalSc,b.asentimientoVerbalCc AS asentimientoVerbalCc, b.estudio AS estudio, b.VERSION AS version FROM cte0 AS a JOIN cte1 AS b ON (a.codigo=b.codigo AND a.fechaFirma=b.fechaFirma) INNER JOIN cte2 c on c.codigo=b.codigo WHERE (a.aceptaParteASc<>b.aceptaParteACc OR a.aceptaParteASc<>b.aceptaParteACc IS NULL) OR (a.aceptaParteBSc<>b.aceptaParteBCc OR a.aceptaParteBSc<>b.aceptaParteBCc IS NULL) OR (a.aceptaParteCSc<>b.aceptaParteCCc OR a.aceptaParteCSc<>b.aceptaParteCCc IS NULL) OR (a.aceptaParteDSc<>c.aceptaParteDCc OR a.aceptaParteDSc<>c.aceptaParteDCc IS NULL)) UNION (WITH cte0 AS ( SELECT DISTINCT spc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, spc.FECHA_CARTA) AS edadMeses, DATE_FORMAT(spc.FECHA_CARTA,'%d-%m-%Y') AS fechaFirma, spc.USUARIO_REGISTRO AS usuarioRegistro, 'NA' AS aceptaParteASc, 'NA' AS aceptaParteBSc, 'NA' AS aceptaParteCSc, 'NA' AS aceptaParteDSc, IF(SUM(CASE WHEN dp.IDPARTE = 18 AND dp.ACEPTA = 1 THEN dp.ACEPTA ELSE 0 END)=1,'1','0') AS aceptaParteGSc, spc.CONTACTO_FUTURO AS aceptaContactoFuturoSc,(SELECT m.es FROM mensajes m WHERE m.catRoot = 'CAT_TIPO_ASENT' AND m.catKey = spc.TIPO_ASENTIMIENTO) AS asentimientoVerbalSc, e.CODIGO AS estudio, v.VERSION AS version FROM participantes p INNER JOIN scan_participante_carta spc ON p.CODIGO=spc.codigo_participante INNER JOIN scan_detalle_parte dp USING(IDPARTICIPANTECARTA)INNER JOIN scan_catalog_version v ON v.IDVERSION = spc.IDVERSION INNER JOIN estudios e ON e.CODIGO=v.CODIGO_ESTUDIO WHERE (YEAR(spc.FECHA_CARTA)= YEAR(CURDATE()) AND spc.IDVERSION = 3 AND spc.ANULADA = 0) GROUP BY spc.CODIGO_PARTICIPANTE, FECHA_CARTA, spc.USUARIO_REGISTRO, spc.CONTACTO_FUTURO, spc.TIPO_ASENTIMIENTO ORDER BY spc.CODIGO_PARTICIPANTE ASC ), cte1 AS ( SELECT DISTINCT cc.CODIGO_PARTICIPANTE AS codigo, fn_edad_actual_meses(p.FECHANAC) AS edadActualMeses,fn_edad_meses(p.FECHANAC, cc.fecha_firma) AS edadMeses, DATE_FORMAT(cc.fecha_firma, '%d-%m-%Y') AS fechaFirma, cc.usuario_registro AS usuarioRegistro, coalesce(cc.ACEPTA_PARTE_A,'NA') AS aceptaParteACc, coalesce(cc.ACEPTA_PARTE_B,'NA') AS aceptaParteBCc, coalesce(cc.ACEPTA_PARTE_C,'NA') AS aceptaParteCCc, coalesce(cc.ACEPTA_PARTE_D,'NA') AS aceptaParteDCc, cc.ACEPTA_PARTE_G AS aceptaParteGCc, cc.ACEPTA_CONTACTO_FUTURO AS aceptaContactoFuturoCc, COALESCE((SELECT m.es FROM mensajes m WHERE m.catRoot='CAT_TIPO_ASENT' AND m.catKey = t.ASENTIMIENTO_VERBAL),'NA') asentimientoVerbalCc, t.CODIGO_ESTUDIO AS estudio, CONCAT(cc.version,'.0') AS \"version\" FROM cartas_consentimientos cc INNER JOIN tamizajes t ON cc.CODIGO_TAMIZAJE=t.codigo INNER JOIN participantes p ON p.CODIGO=cc.codigo_participante WHERE YEAR(cc.FECHA_FIRMA)= YEAR(CURDATE()) AND cc.VERSION = '1' AND t.CODIGO_ESTUDIO=4 ORDER BY cc.CODIGO_PARTICIPANTE ASC )SELECT b.codigo AS codigo, b.fechaFirma AS fechaFirma, b.edadActualMeses AS edadActualMeses, b.edadMeses AS edadMeses, a.aceptaParteASc AS aceptaParteASc, b.aceptaParteACc AS aceptaParteACc, a.aceptaParteBSc AS aceptaParteBSc, b.aceptaParteBCc AS aceptaParteBCc, a.aceptaParteCSc AS aceptaParteCSc, b.aceptaParteCCc AS aceptaParteCCc, a.aceptaParteDSc AS aceptaParteDSc, b.aceptaParteDCc AS aceptaParteDCc, a.aceptaParteGSc, b.aceptaParteGCc, a.aceptaContactoFuturoSc AS aceptaContactoFuturoSc,b.aceptaContactoFuturoCc AS aceptaContactoFuturoCc, a.asentimientoVerbalSc AS asentimientoVerbalSc,b.asentimientoVerbalCc AS asentimientoVerbalCc, b.estudio AS estudio, b.VERSION AS version FROM cte0 AS a JOIN cte1 AS b ON (a.codigo=b.codigo AND a.fechaFirma=b.fechaFirma) WHERE (a.aceptaParteASc<>b.aceptaParteACc OR a.aceptaParteASc<>b.aceptaParteACc IS NULL) OR (a.aceptaParteBSc<>b.aceptaParteBCc OR a.aceptaParteBSc<>b.aceptaParteBCc IS NULL) OR (a.aceptaParteCSc<>b.aceptaParteCCc OR a.aceptaParteCSc<>b.aceptaParteCCc IS NULL) OR (a.aceptaParteDSc<>b.aceptaParteDCc OR a.aceptaParteDSc<>b.aceptaParteDCc IS NULL) OR (a.aceptaParteGSc<>b.aceptaParteGCc OR a.aceptaParteGSc<>b.aceptaParteGCc IS NULL))");
        query.setResultTransformer(Transformers.aliasToBean(DiferenciaParteCartaDto.class));
        return query.list();
    }

    public List<ComparacionCartasDto> getConsentimientosSinCarta() {
        Session session = sessionFactory.getCurrentSession();
        Query query = session.createSQLQuery("SELECT t1.CODIGO_PARTICIPANTE as codigoParticipante, DATE_FORMAT(t1.FECHA_FIRMA, '%d-%m-%Y') as fechaFirma, FLOOR(fn_edad_actual_meses(t3.FECHANAC)/12) as edadActual, t1.USUARIO_REGISTRO as usuarioRegistro, "+
                "t1.ACEPTA_CONTACTO_FUTURO as contactoFuturo, COALESCE(t4.ASENTIMIENTO_VERBAL, '-') as asentimiento, t1.ACEPTA_PARTE_A as parteA, t1.ACEPTA_PARTE_B as parteB, t1.ACEPTA_PARTE_C as parteC, "+
                "concat(t1.NOMBRE1_TUTOR, IF(t1.NOMBRE2_TUTOR is not null,' ', ''), COALESCE(t1.NOMBRE2_TUTOR,''), ' ', t1.APELLIDO1_TUTOR, IF(t1.APELLIDO2_TUTOR is not null,' ', ''), COALESCE(t1.APELLIDO2_TUTOR, '')) as quienFirma, "+
        "(select m.es from mensajes m where m.catRoot = 'CP_CAT_RFTUTOR' and m.catKey = t1.RELACION_FAMILIAR) as relacionFamiliar, t1.VERSION as versionCarta, es.NOMBRE as estudio "+
        "FROM cartas_consentimientos t1 "+
        "left join scan_participante_carta t2 on t1.CODIGO_PARTICIPANTE = t2.CODIGO_PARTICIPANTE "+
        "inner join participantes t3 on t1.CODIGO_PARTICIPANTE = t3.CODIGO " +
        "inner join tamizajes t4 on t1.CODIGO_TAMIZAJE = t4.CODIGO "+
        "inner join estudios es on t4.CODIGO_ESTUDIO = es.CODIGO "+
        "WHERE (t2.CODIGO_PARTICIPANTE Is Null) " +
        "and t1.FECHA_FIRMA >=  str_to_date('15/03/2022', '%d/%m/%Y') " + //FECHA INICIO DE SCAN WEB OFICIAL 15-03-2022. MA2022
        "order by t1.CODIGO_PARTICIPANTE");
        query.setResultTransformer(Transformers.aliasToBean(ComparacionCartasDto.class));
        return query.list();
    }


    @SuppressWarnings("unchecked")
    public List<DiferenciaParteCartaDto> getDiferenciasPartesCartasG()
    {
        Session session = sessionFactory.getCurrentSession();
        Query query = session.createSQLQuery("select a.CODIGO_PARTICIPANTE as codigo, a.FECHA_FIRMA as fechaFirma, a.USUARIO_REGISTRO as usuarioRegistro, " +
                "a.EDAD_ACTUAL_MESES as edadActualMeses, a.EDAD_MESES as edadMeses,  " +
                "a.ACEPTA_PARTE_G AS aceptaParteGCc, b.ACEPTA_PARTE_G AS aceptaParteGSc, " +
                "a.ACEPTA_CONTACTO_FUTURO as aceptaContactoFuturoCc, b.ACEPTA_CONTACTO_FUTURO as aceptaContactoFuturoSc," +
                "a.ASENTIMIENTO_VERBAL as asentimientoVerbalCc, b.ASENTIMIENTO_VERBAL as asentimientoVerbalSc, " +
                "a.CODIGO_ESTUDIO as estudio, " +
                "a.VERSION as version " +
                "from ( SELECT t1.CODIGO_PARTICIPANTE, DATE_FORMAT(t1.FECHA_FIRMA, '%d-%m-%Y') as FECHA_FIRMA, t1.USUARIO_REGISTRO AS USUARIO_REGISTRO, " +
                "               fn_edad_actual_meses(t3.FECHANAC) as EDAD_ACTUAL_MESES, fn_edad_meses(t3.FECHANAC, t1.FECHA_FIRMA) as EDAD_MESES, t1.ACEPTA_PARTE_G," +
                "               t1.ACEPTA_CONTACTO_FUTURO, COALESCE(t2.ASENTIMIENTO_VERBAL, 'NA') as ASENTIMIENTO_VERBAL, concat(t1.VERSION, '.0') as VERSION, t2.CODIGO_ESTUDIO as CODIGO_ESTUDIO " +
                "        FROM cartas_consentimientos t1 inner join tamizajes t2 on t1.CODIGO_TAMIZAJE = t2.CODIGO " +
                "               inner join participantes t3 on t1.CODIGO_PARTICIPANTE = t3.CODIGO " +
                "        WHERE date(t1.FECHA_FIRMA) >= str_to_date('10-02-2023', '%d-%m-%Y') AND t2.CODIGO_ESTUDIO=4 " +
                ") AS a,(select t1.CODIGO_PARTICIPANTE, DATE_FORMAT(t1.FECHA_CARTA, '%d-%m-%Y') as FECHA_CARTA, " +
                "        (SELECT if(t3.ACEPTA, '1','0') FROM scan_detalle_parte t3 INNER JOIN scan_catalog_parte t2 ON t3.IDPARTE = t2.IDPARTE " +
                "         WHERE t3.IDPARTICIPANTECARTA = t1.IDPARTICIPANTECARTA AND (t2.PARTE = 'G' OR t2.PARTE = 'Parte G')) AS ACEPTA_PARTE_G, " +
                "         if(t1.CONTACTO_FUTURO, '1','0') as ACEPTA_CONTACTO_FUTURO, if (t1.TIPO_ASENTIMIENTO='1', t1.ASENTIMIENTO, 'NA') as ASENTIMIENTO_VERBAL, " +
                "            tv.VERSION as VERSION, tv.CODIGO_ESTUDIO AS CODIGO_ESTUDIO " +
                "         from scan_participante_carta t1 inner join scan_catalog_version tv on t1.IDVERSION = tv.IDVERSION AND t1.FECHA_CARTA >= STR_TO_DATE('10-02-2023','%d-%m-%Y') AND tv.CODIGO_ESTUDIO = 4) as b " +
                "where a.CODIGO_PARTICIPANTE = b.CODIGO_PARTICIPANTE and a.FECHA_FIRMA = b.FECHA_CARTA and a.VERSION = b.VERSION and (a.ACEPTA_PARTE_G != b.ACEPTA_PARTE_G)");
        query.setResultTransformer(Transformers.aliasToBean(DiferenciaParteCartaDto.class));
        return query.list();
    }

    @SuppressWarnings("unchecked")
    public List<ComparacionTutorRelFamDto> getDiferenciasRelFam(){
        Session session = sessionFactory.getCurrentSession();
        Query query = session.createSQLQuery("(WITH cte0 AS( SELECT DISTINCT spc.CODIGO_PARTICIPANTE AS codigoParticipante, DATE(p.FECHANAC) AS fechaNac, DATE(spc.FECHA_CARTA) AS fechaFirma, spc.USUARIO_REGISTRO AS usuarioRegistro, FLOOR(fn_edad_meses(p.FECHANAC, spc.FECHA_CARTA)/12) as edadFirma,CONCAT_WS(' ',spc.NOMBRE1TUTOR, spc.NOMBRE2TUTOR, spc.APELLIDO1TUTOR, spc.APELLIDO2TUTOR) AS nombreTutorS, (SELECT m.es FROM mensajes m WHERE m.catRoot ='CP_CAT_RFTUTOR' AND m.catKey=spc.RELACION_FAMILIAR) AS relacionFamiliarS,e.NOMBRE AS estudio,v.VERSION AS versionCarta FROM participantes p INNER JOIN participantes_procesos pp USING(codigo) INNER JOIN scan_participante_carta spc ON spc.CODIGO_PARTICIPANTE = p.codigo INNER JOIN scan_detalle_parte dp ON spc.IDPARTICIPANTECARTA=dp.IDPARTICIPANTECARTA INNER JOIN scan_catalog_version v ON spc.IDVERSION=v.IDVERSION INNER JOIN estudios e ON e.CODIGO=v.CODIGO_ESTUDIO WHERE (YEAR(spc.FECHA_CARTA)=YEAR(CURDATE()) AND spc.IDVERSION = 1 AND spc.ANULADA = 0) GROUP BY spc.CODIGO_PARTICIPANTE,p.FECHANAC,spc.FECHA_CARTA,spc.USUARIO_REGISTRO, spc.NOMBRE1TUTOR, spc.NOMBRE2TUTOR, spc.APELLIDO1TUTOR, spc.APELLIDO2TUTOR,spc.RELACION_FAMILIAR,e.NOMBRE,v.VERSION ORDER BY 1),cte1 AS (SELECT DISTINCT cc.CODIGO_PARTICIPANTE AS codigoParticipante, date(p.FECHANAC) AS fechaNac, DATE(cc.fecha_firma) AS fechaFirma, FLOOR(fn_edad_meses(p.FECHANAC, cc.fecha_firma)/12) as edadFirma, cc.usuario_registro AS usuarioRegistro, CONCAT_WS(' ',cc.NOMBRE1_TUTOR,cc.NOMBRE2_TUTOR, cc.APELLIDO1_TUTOR, cc.APELLIDO2_TUTOR) AS nombreTutorC, (SELECT m.es FROM mensajes m WHERE m.catRoot ='CP_CAT_RFTUTOR' AND m.catKey=cc.RELACION_FAMILIAR) AS relacionFamiliarC, (SELECT e.NOMBRE from estudios e WHERE e.CODIGO=t.CODIGO_ESTUDIO) AS estudio, concat(cc.version,'.0') AS versionCarta FROM cartas_consentimientos cc INNER JOIN tamizajes t ON cc.CODIGO_TAMIZAJE=t.codigo INNER JOIN participantes p ON cc.CODIGO_PARTICIPANTE =p.CODIGO INNER JOIN participantes_procesos pp ON pp.codigo=p.CODIGO WHERE YEAR(cc.FECHA_FIRMA)=YEAR(CURDATE()) AND cc.VERSION = '3' AND t.CODIGO_ESTUDIO=1 AND cc.NOMBRE1_TUTOR IS NOT NULL ORDER BY 1)SELECT a.codigoParticipante, DATE_FORMAT(b.fechaFirma, '%d-%m-%Y') AS fechaFirma, b.usuarioRegistro AS usuarioRegistro, b.edadFirma AS edadFirma,a.nombreTutorS AS nombreTutorS, b.nombreTutorC AS nombreTutorC,a.relacionFamiliarS,b.relacionFamiliarC,b.estudio AS estudio, b.versionCarta AS versionCarta FROM cte0 AS a JOIN cte1 AS b ON a.codigoParticipante = b.codigoParticipante AND a.fechaFirma=b.fechaFirma WHERE a.nombreTutorS<>b.nombreTutorC OR a.relacionFamiliarS<>b.relacionFamiliarC) UNION ALL (WITH cte0 AS (SELECT DISTINCT spc.CODIGO_PARTICIPANTE AS codigoParticipante, DATE(p.FECHANAC) AS fechaNac, DATE(spc.FECHA_CARTA) AS fechaFirma, FLOOR(fn_edad_meses(p.FECHANAC, spc.FECHA_CARTA)/12) as edadFirma,spc.USUARIO_REGISTRO AS usuarioRegistro, CONCAT_WS(' ',spc.NOMBRE1TUTOR, spc.NOMBRE2TUTOR, spc.APELLIDO1TUTOR, spc.APELLIDO2TUTOR) AS nombreTutorC, (SELECT m.es FROM mensajes m WHERE m.catRoot ='CP_CAT_RFTUTOR' AND m.catKey = spc.RELACION_FAMILIAR) AS relacionFamiliarC,e.NOMBRE AS estudio,v.VERSION AS versionCarta FROM participantes p INNER JOIN participantes_procesos pp USING(codigo) INNER JOIN scan_participante_carta spc ON spc.CODIGO_PARTICIPANTE = p.codigo INNER JOIN scan_detalle_parte dp ON spc.IDPARTICIPANTECARTA=dp.IDPARTICIPANTECARTA INNER JOIN scan_catalog_version v ON spc.IDVERSION=v.IDVERSION INNER JOIN estudios e ON e.CODIGO=v.CODIGO_ESTUDIO WHERE (YEAR(spc.FECHA_CARTA)=YEAR(CURDATE()) AND spc.IDVERSION = 2 AND spc.ANULADA = 0) GROUP BY spc.CODIGO_PARTICIPANTE,p.FECHANAC,spc.FECHA_CARTA,spc.USUARIO_REGISTRO, spc.NOMBRE1TUTOR, spc.NOMBRE2TUTOR, spc.APELLIDO1TUTOR, spc.APELLIDO2TUTOR,spc.RELACION_FAMILIAR,e.NOMBRE,v.VERSION ORDER BY 1), cte1 AS (SELECT DISTINCT cc.CODIGO_PARTICIPANTE AS codigoParticipante, date(p.FECHANAC) AS fechaNac, DATE(cc.fecha_firma) AS fechaFirma, FLOOR(fn_edad_meses(p.FECHANAC, cc.fecha_firma)/12) as edadFirma, cc.usuario_registro AS usuarioRegistro, CONCAT_WS(' ',cc.NOMBRE1_TUTOR,cc.NOMBRE2_TUTOR, cc.APELLIDO1_TUTOR, cc.APELLIDO2_TUTOR) AS nombreTutorS, (SELECT m.es from mensajes m WHERE m.catRoot='CP_CAT_RFTUTOR' AND m.catKey=cc.RELACION_FAMILIAR) AS relacionFamiliarS, (SELECT e.NOMBRE from estudios e WHERE e.CODIGO=t.CODIGO_ESTUDIO) AS estudio, concat(cc.version,'.0') AS versionCarta FROM cartas_consentimientos cc INNER JOIN tamizajes t ON cc.CODIGO_TAMIZAJE=t.codigo INNER JOIN participantes p ON cc.CODIGO_PARTICIPANTE =p.CODIGO INNER JOIN participantes_procesos pp ON pp.codigo=p.CODIGO WHERE YEAR(cc.FECHA_FIRMA)=YEAR(CURDATE()) AND cc.VERSION = '15' AND t.CODIGO_ESTUDIO=3 AND cc.NOMBRE1_TUTOR IS NOT NULL ORDER BY 1)SELECT a.codigoParticipante AS codigoParticipante, DATE_FORMAT(b.fechaFirma, '%d-%m-%Y') AS fechaFirma, b.usuarioRegistro AS usuarioRegistro,b.edadFirma, a.nombreTutorC AS nombreTutorC, b.nombreTutorS AS nombreTutorS,a.relacionFamiliarC,b.relacionFamiliarS AS relacionFamiliarS, b.estudio AS estudio, b.versionCarta AS versionCarta FROM cte0 AS a JOIN cte1 AS b ON a.codigoParticipante = b.codigoParticipante AND a.fechaFirma=b.fechaFirma WHERE a.nombreTutorC<>b.nombreTutorS OR a.relacionFamiliarC<>b.relacionFamiliarS) UNION ALL (WITH cte0 AS (SELECT DISTINCT spc.CODIGO_PARTICIPANTE AS codigoParticipante,DATE(p.FECHANAC) AS fechaNac, DATE(spc.FECHA_CARTA) AS fechaFirma, spc.USUARIO_REGISTRO AS usuarioRegistro, FLOOR(fn_edad_meses(p.FECHANAC, spc.FECHA_CARTA)/12) as edadFirma, CONCAT_WS(' ',spc.NOMBRE1TUTOR, spc.NOMBRE2TUTOR, spc.APELLIDO1TUTOR, spc.APELLIDO2TUTOR) AS nombreTutorC,(SELECT m.es FROM mensajes m WHERE m.catRoot='CP_CAT_RFTUTOR' AND m.catKey=spc.RELACION_FAMILIAR) AS relacionFamiliarC,e.NOMBRE AS estudio, v.VERSION AS versionCarta FROM participantes p INNER JOIN participantes_procesos pp USING(codigo) INNER JOIN scan_participante_carta spc ON spc.CODIGO_PARTICIPANTE = p.codigo INNER JOIN scan_detalle_parte dp ON spc.IDPARTICIPANTECARTA=dp.IDPARTICIPANTECARTA INNER JOIN scan_catalog_version v ON spc.IDVERSION=v.IDVERSION INNER JOIN estudios e ON e.CODIGO=v.CODIGO_ESTUDIO WHERE (YEAR(spc.FECHA_CARTA)=YEAR(CURDATE()) AND spc.IDVERSION = 5 AND spc.ANULADA = 0) GROUP BY spc.CODIGO_PARTICIPANTE,p.FECHANAC,spc.FECHA_CARTA,spc.USUARIO_REGISTRO, spc.NOMBRE1TUTOR, spc.NOMBRE2TUTOR, spc.APELLIDO1TUTOR, spc.APELLIDO2TUTOR,spc.RELACION_FAMILIAR,e.NOMBRE,v.VERSION ORDER BY 1), cte1 AS (SELECT DISTINCT cc.CODIGO_PARTICIPANTE AS codigoParticipante, date(p.FECHANAC) AS fechaNac,DATE(cc.fecha_firma) AS fechaFirma, FLOOR(fn_edad_meses(p.FECHANAC, cc.fecha_firma)/12) as edadFirma, cc.usuario_registro AS usuarioRegistro, CONCAT_WS(' ',cc.NOMBRE1_TUTOR,cc.NOMBRE2_TUTOR, cc.APELLIDO1_TUTOR, cc.APELLIDO2_TUTOR) AS nombreTutorS, (SELECT m.es FROM mensajes m WHERE m.catRoot = 'CP_CAT_RFTUTOR' AND m.catKey = cc.RELACION_FAMILIAR) AS relacionFamiliarS, (SELECT e.NOMBRE from estudios e WHERE e.CODIGO=t.CODIGO_ESTUDIO) AS estudio, concat(cc.version,'.0') AS version FROM cartas_consentimientos cc INNER JOIN tamizajes t ON cc.CODIGO_TAMIZAJE=t.codigo INNER JOIN participantes p ON cc.CODIGO_PARTICIPANTE =p.CODIGO INNER JOIN participantes_procesos pp ON pp.codigo=p.CODIGO WHERE YEAR(cc.FECHA_FIRMA)=YEAR(CURDATE()) AND cc.VERSION = '1' AND t.CODIGO_ESTUDIO=5 AND cc.NOMBRE1_TUTOR IS NOT NULL ORDER BY 1)SELECT a.codigoParticipante AS codigoParticipante, DATE_FORMAT(b.fechaFirma, '%d-%m-%Y') AS fechaFirma,b.usuarioRegistro AS usuarioRegistro, b.edadFirma AS edadFirma,a.nombreTutorC AS nombreTutorC, b.nombreTutorS AS nombreTutorS,a.relacionFamiliarC AS relacionFamiliarC,b.relacionFamiliarS AS relacionFamiliarS,b.estudio, b.version AS versionCarta FROM cte0 AS a JOIN cte1 AS b ON a.codigoParticipante = b.codigoParticipante AND a.fechaFirma=b.fechaFirma WHERE a.nombreTutorC<>b.nombreTutorS OR a.relacionFamiliarC<>b.relacionFamiliarS)");
        query.setResultTransformer(Transformers.aliasToBean(ComparacionTutorRelFamDto.class));
        return query.list();
    }
}
